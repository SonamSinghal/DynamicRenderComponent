@page "/renderUsingRenderFragment"
@inject NavigationManager navigationManager
@inject IComponentService _componentService;


<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

<select id="components" name="components" @bind="selectedType">
    @foreach (var type in types)
    {
        <option value="@type.Name"> @type.Name </option>
    }
</select>

<select id="components" name="zones" @bind="selectedZone">
    @foreach (var zone in zones)
    {
        <option value="@zone"> @zone </option>
    }
</select>

<button @onclick="RenderComponent">ADD</button>


<div>
    <h2>DIV 1</h2>
    @if (DatabaseComponentsList.Count != 0)
    {
        @foreach (var render in DatabaseComponentsList.Where(x => x.Zone == "1").OrderBy(x => x.Sequence))
        {
            RenderZones(render.ComponentName);
            <div>@renderZoneFragments</div>
        }
    }
    @foreach (var render in CurrentComponentsList.Where(x => x.Zone == "1"))
    {
        RenderZones(render.ComponentName);
        <div>@renderZoneFragments</div>
    }
    <hr />
</div>
<div>
    <h2>DIV 2</h2>
    @if (DatabaseComponentsList.Count != 0)
    {
        @foreach (var render in DatabaseComponentsList.Where(x => x.Zone == "2").OrderBy(x => x.Sequence))
        {
            RenderZones(render.ComponentName);
            <div>@renderZoneFragments</div>
            
        }
    }
    @foreach (var render in CurrentComponentsList.Where(x => x.Zone == "2"))
    {
        RenderZones(render.ComponentName);
        <div>@renderZoneFragments</div>
    }
    <hr />
</div>

<div>
    <h2>DIV 3</h2>
    @if (DatabaseComponentsList.Count != 0)
    {
        @foreach (var render in DatabaseComponentsList.Where(x => x.Zone == "3").OrderBy(x => x.Sequence))
        {
            RenderZones(render.ComponentName);
            <div>@renderZoneFragments</div>
        }
    }
    @foreach (var render in CurrentComponentsList.Where(x => x.Zone == "3"))
    {
        RenderZones(render.ComponentName);
        <div>@renderZoneFragments</div>
    }
    <hr />
</div>


@code {
    //List<string> types = new List<string> { "CheckboxComponent", "TextboxComponent" };
    List<Type> types = Assembly.GetExecutingAssembly().GetTypes().Where(type => type.GetInterfaces().Contains(typeof(IWebComponents))).ToList();
    List<string> zones = new List<string> { "1", "2", "3" };
    List<ComponentModel> CurrentComponentsList = new List<ComponentModel>();
    List<ComponentModel> DatabaseComponentsList = new List<ComponentModel>();


    int sequence1 = 0;
    int sequence2 = 0;
    int sequence3 = 0;

    string ComponentNamespace = "DynamicRenderComponent.Components.";

    public Type? type;
    private string selectedType = String.Empty;
    private string select = String.Empty;
    private string selectedZone = String.Empty;
    private string zone = String.Empty;
    private bool shouldRender = true;

    RenderFragment? renderZoneFragments;

    private RenderFragment CreateFragment(Type type) => builder =>
    {

        if (type != null)
        {
            builder.OpenComponent(0, type);
            builder.CloseComponent();
        }
    };

    protected async override Task OnInitializedAsync()
    {
        string url = navigationManager.Uri;
        DatabaseComponentsList = await _componentService.GetAllComponentsAsync(url);
        if (DatabaseComponentsList.Where(x => x.Zone == "1").ToList().Count == 0)
        {
            sequence1 = 0;
        }
        else {
            sequence1 = DatabaseComponentsList.Where(x => x.Zone == "1").Select(x => x.Sequence).Max();
        }

        if (DatabaseComponentsList.Where(x => x.Zone == "2").ToList().Count == 0)
        {
            sequence2 = 0;
        }
        else
        {
            sequence2 = DatabaseComponentsList.Where(x => x.Zone == "2").Select(x => x.Sequence).Max();
        }

        if (DatabaseComponentsList.Where(x => x.Zone == "3").ToList().Count == 0)
        {
            sequence3 = 0;
        }
        else
        {
            sequence3 = DatabaseComponentsList.Where(x => x.Zone == "3").Select(x => x.Sequence).Max();
        }
    }

    public async Task RenderComponent()
    {
        shouldRender = true;
        zone = selectedZone;
        select = selectedType;
        string url = navigationManager.Uri;

        ComponentModel component = new ComponentModel()
            {
                ComponentName = select,
                CreatedOn = DateTime.Now,
                Zone = zone,
                PageUrl = url
            };

        switch (zone)
        {
            case "1":
                component.Sequence = ++sequence1;
                break;
            case "2":
                component.Sequence = ++sequence2;
                break;
            case "3":
                component.Sequence = ++sequence3;
                break;
        }

        CurrentComponentsList.Add(component);
        var response = await _componentService.PostComponent(component);
    }

    public void RenderZones(string select)
    {
        type = Type.GetType($"{ComponentNamespace}{select}");
        renderZoneFragments = CreateFragment(type);
    }

    protected override bool ShouldRender()
    {
        return shouldRender;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            shouldRender = false;
            firstRender = shouldRender;
        }

        return base.OnAfterRenderAsync(firstRender);
    }
}
